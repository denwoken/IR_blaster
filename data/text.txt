void IRAM_ATTR intr_spi(void)
{
    // uint32_t ew = READ_PERI_REG(0x3ff00020);
    // uint32_t we = READ_PERI_REG(SPI_SLAVE(HSPI_));
    WRITE_PERI_REG(SPI_SLAVE(HSPI_), SPI_TRANS_DONE_EN);
    uint8_t *id_command = &spi_queue[counter_execute].id;

    switch (*id_command)
    {
    case NONE:
    {
        Serial.println("FACK IT SHIT!");
        // Serial.printf("%08x\t%08x\n", ew,we);
        // Serial.printf("%08x\t%08x\n", READ_PERI_REG(REG_SPI_BASE(SPI_) + 0xF8), READ_PERI_REG(REG_SPI_BASE(SPI_) + 0xF8));
        /* Serial.println(*id_command);
         Serial.println(spi_intr_flag);
         Serial.println();
         Serial.println(counter_execute);
         Serial.println(counter_add);
         Serial.println();
         Serial.printf("   \t id\t xa\t\t ya\t\t len\t val\n");
         for(int i = 0;i<=BUFF_SIZE;i++)
             Serial.printf("%d)\t %d\t %d\t %d\t %d\t %d\n",i,
                 spi_queue[i].id,
                 spi_queue[i].xa,
                 spi_queue[i].ya,
                 spi_queue[i].len,
                 spi_queue[i].color.value);
        */
        while (1)
        {
            delayMicroseconds(100);
        };
    }
    break;
    case CHAR_COMM_2:
    {
        static uint8_t char_m[6];

        static uint16_t bcolor;
        static uint16_t color;
        if (first_trans_flag)
        {
            first_trans_flag = 0;

            for (int i = 0; i < 5; i++)
                char_m[i] = ((uint8_t *)(spi_queue[counter_execute].color.ptr))[i];
            char_m[5] = 0;

            pixel_num_buff_tr = 0;

            SPI_INTR_DISABLE();

            writeCommand(ST77XX_CASET);
            write32(spi_queue[counter_execute].ya);
            bcolor = *(spi_queue[counter_execute].color.ptr + 3);
            color = *(spi_queue[counter_execute].color.ptr + 4);

            writeCommand(ST77XX_RASET);
            write32(spi_queue[counter_execute].xa);
            os_free(spi_queue[counter_execute].color.ptr);

            writeCommand(ST77XX_RAMWR);

            if (spi_queue[counter_execute].len > 32)
                setDataBits(512);
            WRITE_PERI_REG(SPI_SLAVE(HSPI_), SPI_TRANS_DONE_EN);
            SPI_INTR_ENABLE();
        }

        if (spi_queue[counter_execute].len > 32)
        {
            spi_queue[counter_execute].len -= 32;

            uint16_t data_16 = 0;
            for (uint16_t i = 0; i < 8; i++)
            {
                uint16_t i_32 = pixel_num_buff_tr + i;

                if (1 & (char_m[i_32 >> 4] >> (i_32 & 7)))
                {
                    data_16 = color;
                }
                else
                {
                    data_16 = bcolor;
                }

                *(ADDR_16BIT_SPI1W0 + 2 * i) = data_16;
                //*(ADDR_16BIT_SPI1W0 + 2*i + 1 ) = data_16;
                *(ADDR_16BIT_SPI1W0 + 2 * i + 16) = data_16;
                //*(ADDR_16BIT_SPI1W0 + 2*i + 17) = data_16;
            }

            pixel_num_buff_tr += 16;

            SPI1CMD |= SPIBUSY;
        }
        else
        {
            first_trans_flag = 1;

            // const uint16_t size = spi_queue[counter_execute].len;
            // setDataBits(size << 4);

            uint16_t data_16 = 0;
            for (uint16_t i = 0; i < 8; i++)
            {
                uint16_t i_32 = pixel_num_buff_tr + i;

                if (1 & (char_m[i_32 >> 4] >> (i_32 & 7)))
                {
                    data_16 = color;
                }
                else
                {
                    data_16 = bcolor;
                }

                *(ADDR_16BIT_SPI1W0 + 2 * i) = data_16;
                //*(ADDR_16BIT_SPI1W0 + 2*i + 1 ) = data_16;
                *(ADDR_16BIT_SPI1W0 + 2 * i + 16) = data_16;
                //*(ADDR_16BIT_SPI1W0 + 2*i + 17) = data_16;
            }

            if (counter_execute == BUFF_SIZE)
            {
                counter_execute = 0;
            }
            else
            {
                counter_execute++;
            } //   ��������� �������� ��� counter_execute
            *id_command = 0;
            if (spi_queue[counter_execute].id == 0)
            {
                SPI_INTR_DISABLE();
                spi_intr_flag = 0;
            }
            SPI1CMD |= SPIBUSY;
        }
    }
    break;

    case CHAR_COMM_1:
    {
        static uint8_t char_m[6];
        static uint16_t bcolor, color;

        if (first_trans_flag)
        {
            first_trans_flag = 0;

            for (int i = 0; i < 5; i++)
                char_m[i] = ((uint8_t *)(spi_queue[counter_execute].color.ptr))[i];
            char_m[5] = 0;

            bcolor = *(spi_queue[counter_execute].color.ptr + 3);
            color = *(spi_queue[counter_execute].color.ptr + 4);
            os_free(spi_queue[counter_execute].color.ptr);

            SPI_INTR_DISABLE();
            writeCommand(ST77XX_CASET);
            write32(spi_queue[counter_execute].ya);
            writeCommand(ST77XX_RASET);
            write32(spi_queue[counter_execute].xa);
            writeCommand(ST77XX_RAMWR);

            WRITE_PERI_REG(SPI_SLAVE(HSPI_), SPI_TRANS_DONE_EN);
            SPI_INTR_ENABLE();

            setDataBits(512);

            uint32_t data_32;
            for (uint16_t i = 0; i < 16; i++)
            {
                uint16_t i_32 = (i << 1);

                if (1 & (char_m[i_32 >> 3] >> (i_32 & 7)))
                    data_32 = color << 16;
                else
                    data_32 = bcolor << 16;
                i_32++;
                if (1 & (char_m[i_32 >> 3] >> (i_32 & 7)))
                    data_32 |= color;
                else
                    data_32 |= bcolor;

                *(&SPI1W0 + i) = data_32;
            }
        }
        else
        {
            first_trans_flag = 1;

            setDataBits(256);

            uint32_t data_32;
            for (uint16_t i = 0; i < 8; i++)
            {
                uint16_t i_32 = 32 + (i << 1);

                if (1 & (char_m[i_32 >> 3] >> (i_32 & 7)))
                    data_32 = color << 16;
                else
                    data_32 = bcolor << 16;
                i_32++;

                if (1 & (char_m[i_32 >> 3] >> (i_32 & 7)))
                    data_32 |= color;
                else
                    data_32 |= bcolor;
                *(&SPI1W0 + i) = data_32;
            }

            if (counter_execute == BUFF_SIZE)
                counter_execute = 0;
            else
                counter_execute++; //   ��������� �������� ��� counter_execute
            // os_free(spi_queue[counter_execute].color.ptr);
            *id_command = 0;
            if (spi_queue[counter_execute].id == 0)
            {
                SPI_INTR_DISABLE();
                spi_intr_flag = 0;
            }
        }
        SPI1CMD |= SPIBUSY;
    }
    break;

    case FILL_RECT_COMM:
    {
        if (first_trans_flag)
        {
            first_trans_flag = 0;

            SPI_INTR_DISABLE();

            writeCommand(ST77XX_CASET);
            write32(spi_queue[counter_execute].ya);
            writeCommand(ST77XX_RASET);
            write32(spi_queue[counter_execute].xa);
            writeCommand(ST77XX_RAMWR);

            if (spi_queue[counter_execute].len < 10)
            {
                first_trans_flag = 1;

                setDataBits(16 * spi_queue[counter_execute].len);
                for (uint16_t i = 0; i < spi_queue[counter_execute].len; i += 2)
                {
                    *(ADDR_16BIT_SPI1W0 + i) = spi_queue[counter_execute].color.value;
                }

                SPI1CMD |= SPIBUSY;

                *id_command = 0;

                if (counter_execute == BUFF_SIZE)
                {
                    counter_execute = 0;
                }
                else
                {
                    counter_execute++;
                } // ��������� �������� ��� counter_execute

                while (SPI1CMD & SPIBUSY)
                {
                    asm volatile("NOP\n");
                };

                if (spi_queue[counter_execute].id != 0)
                {
                    WRITE_PERI_REG(SPI_SLAVE(HSPI_), SPI_TRANS_DONE_EN | SPI_TRANS_DONE);
                    SPI_INTR_ENABLE();
                }
                else
                {
                    spi_intr_flag = 0;
                }

                break;
            }
            else if (spi_queue[counter_execute].len > 32)
            {
                setDataBits(512);
                for (uint16_t i = 0; i < 32; i += 2)
                {
                    *(ADDR_16BIT_SPI1W0 + i) = spi_queue[counter_execute].color.value;
                }
            }

            WRITE_PERI_REG(SPI_SLAVE(HSPI_), SPI_TRANS_DONE_EN);
            SPI_INTR_ENABLE();
        }

        if (spi_queue[counter_execute].len > 32)
        {
            spi_queue[counter_execute].len -= 32;
            SPI1CMD |= SPIBUSY;
        }
        else
        {
            first_trans_flag = 1;

            const uint16_t size = spi_queue[counter_execute].len;

            setDataBits(size * 16);

            for (uint16_t i = 0; i < size; i += 2)
            {
                *(ADDR_16BIT_SPI1W0 + i) = spi_queue[counter_execute].color.value;
            }

            if (counter_execute == BUFF_SIZE)
            {
                counter_execute = 0;
            }
            else
            {
                counter_execute++;
            } //   ��������� �������� ��� counter_execute

            *id_command = 0;
            // Serial.printf("c_ex %d\n", counter_execute);
            if (spi_queue[counter_execute].id == 0)
            {
                spi_intr_flag = 0;
                SPI_INTR_DISABLE();
            }
            // else{ WRITE_PERI_REG(SPI_SLAVE(HSPI_), SPI_TRANS_DONE_EN); SPI_INTR_ENABLE(); }

            SPI1CMD |= SPIBUSY;
        }
    }
    break;

    case BUFF_COMM:
    {
        static uint16_t *addr_16_data;
        if (first_trans_flag)
        {
            SPI_INTR_DISABLE();
            writeCommand(ST77XX_CASET);
            write32(spi_queue[counter_execute].ya);
            addr_16_data = spi_queue[counter_execute].color.ptr;
            writeCommand(ST77XX_RASET);
            pixel_num_buff_tr = 0;
            first_trans_flag = 0;
            write32(spi_queue[counter_execute].xa);
            writeCommand(ST77XX_RAMWR);

            if (spi_queue[counter_execute].len > 32)
                setDataBits(512);
            WRITE_PERI_REG(SPI_SLAVE(HSPI_), SPI_TRANS_DONE_EN);
            SPI_INTR_ENABLE();
        }

        if (spi_queue[counter_execute].len > 32)
        {
            spi_queue[counter_execute].len -= 32;

            // os_memcpy(ADDR_16BIT_SPI1W0 , spi_queue[counter_execute].colors + pixel_num_buff_tr, 64);
            for (uint16_t i = 0; i < 16; i++)
            {
                const uint16_t *offset = addr_16_data + (i << 1) + pixel_num_buff_tr;
                *(&SPI1W0 + i) = (*(offset + 1)) | ((*(offset)) << 16);
            }

            pixel_num_buff_tr += 32;

            SPI1CMD |= SPIBUSY;
        }
        else
        {
            first_trans_flag = 1;
            const uint16_t size = spi_queue[counter_execute].len;
            setDataBits(size * 16);

            for (uint16_t i = 0; i < size / 2; i++)
            {
                const uint16_t *offset = addr_16_data + (i << 1) + pixel_num_buff_tr;
                *(&SPI1W0 + i) = (*(offset + 1)) | ((*(offset)) << 16);
            }
            // if (size % 2 == 1) {                                                     // �������� ���������� ��������!!!!!!!!!!!!!!!!!!!!!
            //     const uint16_t* offset = addr_16_data + size-1 + pixel_num_buff_tr;
            //     *(&SPI1W0 + size/2 - 1) = (*(offset + 1)) | ((*(offset)) << 16);
            // }
            // os_memcpy(ADDR_8BIT_SPI1W0, spi_queue[counter_execute].colors + pixel_num_buff_tr, 2* size);

            if (counter_execute == BUFF_SIZE)
            {
                counter_execute = 0;
            }
            else
            {
                counter_execute++;
            } //   ��������� �������� ��� counter_execute

            *id_command = 0;

            if (spi_queue[counter_execute].id == 0)
            {
                SPI_INTR_DISABLE();
                spi_intr_flag = 0;
            }

            SPI1CMD |= SPIBUSY;
        }
    }
    break;
    }
}
// Gl_options.spi_queue
void ST7735_pixel_to_queue(int16_t x, int16_t y, uint16_t color)
{
    if (!queue_is_Nempty() || !Gl_options.spi_queue)
    {
        ST7735_setAddrWindow(x, y, 1, 1);
        setDataBits(16);
        *(ADDR_16BIT_SPI1W0) = color; // SPI1W0 = color;
        SPI1CMD |= SPIBUSY;
        return;
    }
    while (spi_queue[counter_add].id != NONE)
    {
        asm volatile("NOP\n");
    } // yield();
    spi_queue[counter_add].id = FILL_RECT_COMM;
    spi_queue[counter_add].xa = ST7735_setAddr(x, 1);
    spi_queue[counter_add].ya = ST7735_setAddr(y, 1);
    spi_queue[counter_add].color.value = color;
    spi_queue[counter_add].len = 1;

    if (counter_add == BUFF_SIZE)
    {
        counter_add = 0;
    }
    else
    {
        counter_add++;
    } //   ��������� �������� ��� counter_add
}

void ST7735_Rect_to_queue(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    uint16_t lenn = w * h;
    if (!queue_is_Nempty() || !Gl_options.spi_queue) //
    {

        ST7735_setAddrWindow(x, y, w, h);
        if (lenn <= 4)
        {
            setDataBits(lenn * 16);
            for (uint16_t i = 0; i < lenn; i += 2)
                *(ADDR_16BIT_SPI1W0 + i) = color;
            SPI1CMD |= SPIBUSY;

            return;
        }
        if (lenn > 32)
        {
            setDataBits(32 * 16);

            for (uint16_t i = 0; i < 32; i += 2)
                *(ADDR_16BIT_SPI1W0 + i) = color;

            for (; lenn >= 32; lenn -= 32)
            {
                SPI1CMD |= SPIBUSY;
                while (SPI1CMD & SPIBUSY)
                    asm volatile("NOP\n");
            }
        }

        if (lenn > 0)
        {
            setDataBits(lenn * 16);
            for (uint16_t i = 0; i < lenn; i += 2)
                *(ADDR_16BIT_SPI1W0 + i) = color;
            SPI1CMD |= SPIBUSY;
            while (SPI1CMD & SPIBUSY)
                asm volatile("NOP\n");
        }
        return;
    }
    while (spi_queue[counter_add].id != NONE)
    {
        asm volatile("NOP\n");
    } // yield();

    spi_queue[counter_add].id = FILL_RECT_COMM;
    spi_queue[counter_add].xa = ST7735_setAddr(x, w);
    spi_queue[counter_add].ya = ST7735_setAddr(y, h);
    spi_queue[counter_add].color.value = color;
    spi_queue[counter_add].len = lenn; // w * h;

    if (counter_add == BUFF_SIZE)
        counter_add = 0;
    else
        counter_add++;
    //   ��������� �������� ��� counter_add

    if (!queue_is_Nempty())
    {
        WRITE_PERI_REG(SPI_SLAVE(HSPI_), SPI_TRANS_DONE_EN | SPI_TRANS_DONE);
        spi_intr_flag = 1;
        SPI_INTR_ENABLE();
    }
}

void ST7735_buff_to_queue(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t *colors)
{
    uint16_t lenn = w * h;
    if (!Gl_options.spi_queue) //
    {

        ST7735_setAddrWindow(x, y, w, h);

        uint16_t pixel_num = 0;
        uint16_t count_last_pix = 0;
        if (lenn > 32)
        {
            setDataBits(512);
            for (; pixel_num + 32 <= lenn; pixel_num += 32)
            {
                for (uint16_t i = 0; i < 16; i++)
                {
                    const uint16_t *offset = colors + 2 * i + pixel_num;
                    *(&SPI1W0 + i) = (*(offset + 1)) | ((*offset) << 16);
                }
                SPI1CMD |= SPIBUSY;
                while (SPI1CMD & SPIBUSY)
                    asm volatile("NOP\n");
            }
            count_last_pix = lenn - pixel_num;
        }
        if (count_last_pix)
        {
            setDataBits(count_last_pix * 16);
            for (uint16_t i = 0; i < count_last_pix; i++)
            {
                const uint16_t *offset = colors + 2 * i + pixel_num;
                *(&SPI1W0 + i) = (*(offset + 1)) | ((*offset) << 16);
            }
        }
    }
    while (spi_queue[counter_add].id != NONE)
    {
        asm volatile("NOP\n");
    } // yield();

    spi_queue[counter_add].id = BUFF_COMM;
    spi_queue[counter_add].xa = ST7735_setAddr(x, w);
    spi_queue[counter_add].ya = ST7735_setAddr(y, h);
    spi_queue[counter_add].color.ptr = colors;
    spi_queue[counter_add].len = lenn;

    if (counter_add == BUFF_SIZE)
    {
        counter_add = 0;
    }
    else
    {
        counter_add++;
    } //   ��������� �������� ��� counter_add

    if (!queue_is_Nempty())
    {
        WRITE_PERI_REG(SPI_SLAVE(HSPI_), SPI_TRANS_DONE_EN | SPI_TRANS_DONE);
        spi_intr_flag = 1;
        SPI_INTR_ENABLE();
    }
}

void wait_end_sending()
{

    wait_queue_to_empty();
    if (spi_intr_flag)
    {
        spi_intr_flag = 0;
        SPI_INTR_DISABLE();
    }
    Buffering::stop_buffer_sending();
}

void ST7735_char_to_queue(uint16_t x, uint16_t y, unsigned char c, uint16_t color, uint16_t bcolor, uint8_t size)
{
    if (!Gl_options.spi_queue) //
    {
        ST7735_setAddrWindow(x, y, 6, 8);

        //(uint8_t)pgm_read_byte(&font[c * 5 + i]);
        uint8_t *char_m = (uint8_t *)os_malloc(5);
        for (uint8_t i = 0; i < 5; i++)
            char_m[i] = (uint8_t)pgm_read_byte(&font[c * 5 + i]);
        char_m[5] = 0;

        setDataBits(512);
        uint32_t data_32;
        for (uint16_t i = 0; i < 16; i++)
        {
            uint16_t i_32 = (i << 1);

            if (1 & (char_m[i_32 >> 3] >> (i_32 & 7)))
            {
                data_32 = color << 16;
            }
            else
            {
                data_32 = bcolor << 16;
            }

            i_32++;

            if (1 & (char_m[i_32 >> 3] >> (i_32 & 7)))
            {
                data_32 |= color;
            }
            else
            {
                data_32 |= bcolor;
            }
            *(&SPI1W0 + i) = data_32;
        }
        SPI1CMD |= SPIBUSY;
        while (SPI1CMD & SPIBUSY)
            asm volatile("NOP\n");

        setDataBits(256);

        for (uint16_t i = 0; i < 8; i++)
        {
            uint16_t i_32 = 32 + (i << 1);

            if (1 & (char_m[i_32 >> 3] >> (i_32 & 7)))
            {
                data_32 = color << 16;
            }
            else
            {
                data_32 = bcolor << 16;
            }

            i_32++;

            if (1 & (char_m[i_32 >> 3] >> (i_32 & 7)))
            {
                data_32 |= color;
            }
            else
            {
                data_32 |= bcolor;
            }
            *(&SPI1W0 + i) = data_32;
        }
        SPI1CMD |= SPIBUSY;
        while (SPI1CMD & SPIBUSY)
            asm volatile("NOP\n");
        os_free(char_m);

        return;
    }

    while (spi_queue[counter_add].id != NONE)
    {
        asm volatile("NOP\n");
    }; // yield();

    uint8_t *char_mem;

    char_mem = (uint8_t *)os_malloc(10);
    if (char_mem == NULL)
    {
        Serial.println("can't allocate memory");
        return;
    }

    for (uint8_t i = 0; i < 5; i++)
        *(char_mem + i) = (uint8_t)pgm_read_byte(&font[c * 5 + i]);

    char_mem[5] = size;
    *((uint16_t *)char_mem + 3) = bcolor;
    *((uint16_t *)char_mem + 4) = color;

    switch (size)
    {
    case 1:
        spi_queue[counter_add].id = CHAR_COMM_1;
        break;
    case 2:
        spi_queue[counter_add].id = CHAR_COMM_2;
        break;
    }

    uint8_t h = 8 * size;
    uint8_t w = 6 * size;
    spi_queue[counter_add].xa = ST7735_setAddr(x, w);
    spi_queue[counter_add].ya = ST7735_setAddr(y, h);
    spi_queue[counter_add].color.ptr = (uint16_t *)char_mem;
    spi_queue[counter_add].len = w * h;

    if (counter_add == BUFF_SIZE)
    {
        counter_add = 0;
    }
    else
    {
        counter_add++;
    } //   ��������� �������� ��� counter_add

    if (!queue_is_Nempty())
    {
        WRITE_PERI_REG(SPI_SLAVE(HSPI_), SPI_TRANS_DONE_EN | SPI_TRANS_DONE);
        spi_intr_flag = 1;
        SPI_INTR_ENABLE();
    }
}

bool queue_is_Nempty() { return spi_intr_flag; };
void wait_queue_to_empty()
{
    while (spi_intr_flag)
    {
        asm volatile("NOP\nNOP\n");
    }
};